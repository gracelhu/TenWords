// for small scale testing
func getTwoWords(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)

	//Loop through the words and find the one with the correct id
	//the correct id for ten word packets: scalar * 10 + 1 --> 1, 11, 21, 31, 41, etc.
	//the correct id for two word packets: scalar * 10 + 1 --> 1, 3, 5, 7, etc.

	for index, item := range allWords {
		if item.ID == params["id"] {
			var twoWords = TwoWordPackage{allWords[index : index+2], currentTime.Format("01-02-2006")}
			json.NewEncoder(w).Encode(twoWords)
			return
		}
	}
}

// for small scale testing
type TwoWordPackage struct {
	Tenwords []Word `json:"twowords"`
	Date     string `json:"date"` //in this format: 01-02-2006
}

//Set the language fields
			for _, itemInPackage := range tenWords.Tenwords {
				languageCodes := [6]string{"es", "fr", "ru", "it", "ja", "zh-cn"}

				for _, languageCode := range languageCodes {
					result, err := t.Translate(item.Word, "auto", languageCode)
					if err != nil {
						panic(err)
					}

					//Setting the language fields
					if languageCode == "es" {
						itemInPackage.Spanish = result.Text
					}
					if languageCode == "fr" {
						itemInPackage.French = result.Text
					}
					if languageCode == "ru" {
						itemInPackage.Russian = result.Text
					}
					if languageCode == "it" {
						itemInPackage.Italian = result.Text
					}
					if languageCode == "ja" {
						itemInPackage.Japanese = result.Text
					}
					if languageCode == "zh-cn" {
						itemInPackage.Chinese = result.Text
					}
				}
			}

				//r.HandleFunc("/api/words/package/id/{id}", getTenWordsByID).Methods("GET")